commands on the command line :
1) pwd : we use this command to show the current working path
---------------------------------------------------------------------
2) cd : we use this command to get in a directory.
----------------------------------------------------------------
3) cd .. : we use this command to get out a directory.
----------------------------------------------------------------
4) ls : we use this command to show the lists of directors.
----------------------------------------------------------------
5) mkdir (dirName): we use this command to creates a new directory.
---------------------------------------------------------------------
6) touch (filename.ex) : we use this command to creates a new file.
-------------------------------------------------------------------------
7) clear : we use this command to clear the command line.
-------------------------------------------------------------------------
8) git clone (repo URL) : we use this command to clone a repository into our computer
--------------------------------------------------------------------------------------
9) git status : we use this command to show the files on the staging area.
--------------------------------------------------------------------------------------
10) git add (filename.ex) : we use this commands add files to the staging area.
you can use (git add *) to add all files in the directory to the staging area.
--------------------------------------------------------------------------------------
11) git reset head (filename.ex) : we use this command to remove unwanted files from the staging area.
--------------------------------------------------------------------------------------
12) git commit -m "write any comment" : this command will move your files from staging area to localRepo.
--------------------------------------------------------------------------------------
13) git branch : we use this command to show the branches of the repository.
--------------------------------------------------------------------------------------
14) git remote -v : we use this command to show the remote repository that we are in.
--------------------------------------------------------------------------------------
15) git push (remoteName) (branchName) : we use this command to push our commits to the repository.
--------------------------------------------------------------------------------------
16) git pull (remoteName) : we use this command to pull new files from the remote repository.
    this command will do two commands (git fetch) and (git merge) parallel.
--------------------------------------------------------------------------------------
17) git fetch (remoteName) : we use this command to fetch the new things in the repository.
18) git merge : we use this command to merge the new things in our local branch.
    this two commands can be done faster in one time using (git pull).
--------------------------------------------------------------------------------------
19) git config --list : we use this command to change the configuration of our repository.
    git config -l (shortcut)
--------------------------------------------------------------------------------------
if you faced a problem when using the (git config --list) command 
with the gitBash press q to get back to writing command again.
--------------------------------------------------------------------------------------
20) git help config : this command will take you to the various configuration options to your repo.
------------------------------------------------------------------------------------------
21) git config --global (configurationName) : 
we use this command to show the value of the specified configurationName.
// we use global here to get the configurations not just on the repo level.
----------------------------------------------------------------------------------------
21) git config --global (configurationName) ("Value") : 
we use this command to edit the value of the specified configurationName.
-----------------------------------------------------------------------------------------
a simple Example to the last two commands:
git config user.name
git config user.name "ahmad ismail"
you can edit any configuration Appears on the configurationList using the last command. 
-----------------------------------------------------------------------------------------
the configuration of the repository may be duplicated the reason why
that the configuration comes from various places so thats clearly a damn a bug in the git things.
so we can use the following command to view the places that we git our configurations from:
22) git config -l --show-(remoteName)
-----------------------------------------------------------------------------------------
23) git config --global --unset (configurationName) : we use this command to remove a configuration value
we can also use git config --global (configurationName) "" to do the same thing.
---------------------------------------------------------------------------------------------------
24) git config --global --edit : we use this command to edit the configurations using the default editor.
-----------------------------------------------------------------------------------------------------------
** what is the public key or the secureShellKey? :
its a general commandLine thing that we can use it in many situations (servers , github , ...)
** what do we need the public key for ?:
we need it to access our repository and authenticate the access to the repository
we use it in github to me authenticated to do actions without the need 
to enter your email and password every time.
** how to create a public key of a secureShellKey ?
1) ssh-keygen -t rsa -b 4096 -C "yourGitHubEmail"
// -t : the key generation algorithm type.
// rsa: rivest shamir adleman (this is an algorithm).
// -b: the key bits number.
// -C: the github email.
// this process will show you the key storing directory.
// this process will ask you to add a password to protect your key (optional to enter).
** how to get your public key? : use command (cat)
2) cat "Path"
//Path: here you enter the path that the public key saved in.   
3) copy your public key and add it to your github account.
4) you can test your public key using the following command:
   ssh -T git@github.com
-----------------------------------------------------------------------------------------------------------
** how to create a repository on github with a new or an already existent projects ? :
1) go to the project directory for the already existent projects or create a new one for new projects.
2) use the following command:
25) git init : we use this command to initialize a new empty repository on our directory.
3) use the commands (add , commit) to add the files to the staging area.
4) go to GitHub.com 
5) create a new repository with any name
6) select the SSh option not the Https option 
7) use the following command:
26) git remote add (remoteName) git@github.com:(yourEmail:theOneOnTheConfiguration)/repoName.git:
we use this command to link the remote repository with the local repository.
8) use the following command:
27) git push -u (remoteName) (branchName): 
we use this command to push the localRepo to the remoteRepo but the (-u) will do pull command 
then push command to avoid conflicts when adding a branch to an existent project.
9) it will ask you for your public key password so keep it in mind.
-----------------------------------------------------------------------------------------------------------
// the pull request and fork is a github feature you can do it to take a repository from another team 
   and edit it and send them a pull request to allow them to review your modification to there code 
   they can ether accept your modification or discard it if its not ok with them.
// the fork is a copy from the base repository that you can edit and then delete it.
go to https://www.youtube.com/watch?v=n43bagVuJPU&list=PLDoPjvoNmBAw4eOj58MZPakHjaO3frVMF&index=10
-----------------------------------------------------------------------------------------------------------
** how to create an Alias to your git bash command? :
firstly the Alias is like a short cut to frequently used command.
28) git config --global alias.(theAliasName) (the Command That You Need To Give It An Alias):
we use this command to give a specific command an Alias to use it in a fast way.
// if there was a command with spaces you need to put it into ("").
// the Alias dos'nt disable the main command.
------------------------------------------------------------------------------------------------------------
** Branching : we use the branch to work on a part of the project alone then merge it with the whole project.
29) git branch (the New branch name) : we use this command to create a new branch.
30) git checkout (branch name) : we use this command to switch to any branch.
31) git branch -d (branch name) : we use this command to delete a branch.
// this command is a safe delete that is when deleting any branch the git will check
   if there is any unmerged modifications it will not delete it.
31.1) git branch -D (branch name) : this command will delete the branch using force.
30.1) git checkout -b (branch name) : this command is a short cut that will 
      create the branch and switch to it in one command.
32) git branch -m (the new branch) : we use this command to edit a branch name.
    we use it when we are in that branch.
33) git merge (branch name) : we use this command to marge the branch into the main one.
// you can ether merge the branch into the repository or you can push it as a new branch.
// you can push the branch as a new one with the normal way and it will create a pull request for that. 
---------------------------------------------------------------------------------------------------------
34) git stash : we use this command to hide a list of added files to the staging area.
35) git stash pop : we use this command to get our hidden files.
35.1) git stash pop stash@{index} : we use this command to pop a stash with a specific index.
36) git stash list : we use this command to show the stashes list on the git.
// if you added a a list of file to one stash and then you added another list of new added files
   to the stash it will create a new stash
37) git stash save "any massage that identify the stashed files" : 
    we use this command to add a massage to the stashes when calling the command number (36).
// the stash is like a stack that is when we have multiple stashes and we need to pop 
   it will pop the last stored stash.
38) git stash apply : this command will get you the content fo the last stash without deleting the stash.
38.1) git stash apply stash@{index} : we use this command to get a stash content with a specific index.
39) git stash drop : we use this command to delete the last added stash along with its content.
39.1) git stash drop stash@{index} : 
we use this command to delete the stash along with its content at a specific index.
40) git stash show : we use this command to show the content of the last stash.
40.1) git stash show stash@{index} : we use this command to show the stash content specific index.
41) git stash clear : we use this command to delete all stashes along with there contents.
// practice on how to create a multiple file stash and then upload these files on a new branch.
------------------------------------------------------------------------------------------------------